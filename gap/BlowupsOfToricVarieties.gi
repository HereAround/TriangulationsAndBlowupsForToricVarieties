################################################################################################
##
##  BlowupsOfToricVarieties.gd          TriangulationsAndBlowupsForToricVarieties package
##
##  Copyright 2019                      Martin Bies,       ULB Brussels
##
#! @Chapter Blowups of toric varieties
##
################################################################################################

########################
##
## Constructors
##
########################

InstallMethod( BlowupOfToricVariety,
               "for a toric variety and a string specifying the blowup locus",
               [ IsToricVariety, IsList ],
  function( variety, blowup_locus )
    local rays, blowup_vars, indeterminates, blowup_rays;

    # 0: test if blow_up locus is given as valid input
    if not IsString( blowup_locus ) then
        Error( "The blowup locus must be specified as a string" );
    fi;
    blowup_vars := SplitString( blowup_locus, "," );
    rays := RayGenerators( FanOfVariety( variety ) );
    if Length( blowup_vars ) = 0 then
        Error( "Invalid blowup locus" );
    fi;
    if Length( blowup_vars ) > Length( rays )then
        Error( "Invalid blowup locus" );
    fi;

    # 1: identify the ray generators, which form the cone tau used for this blowup
    indeterminates := IndeterminatesOfPolynomialRing( CoxRing( variety ) );
    indeterminates := List( [ 1 .. Length( indeterminates ) ], i -> String( indeterminates[ i ] ) );
    blowup_rays := List( [ 1 .. Length( blowup_vars ) ],
                                          i -> rays[ Position( indeterminates, blowup_vars[ i ] ) ] );

    # 2: is the cone generated by blowup_rays contained in the fan?
    # 2: to this end find all max cones which contain this cone and verify that there is at least one
    # 2: check that all of these are smooth, for then also their faces etc. are smooth
    # 2: if this is passed, the conditions for theorem 3.3.17 in CLS are satisfied and we can proceed

    return blowup_rays;

    # 3:

end );
